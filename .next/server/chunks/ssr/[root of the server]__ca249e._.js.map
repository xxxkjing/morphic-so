{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[next]/internal/font/google/inter_95e1d3b3.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"className\": \"inter_95e1d3b3-module__jTJ6xG__className\",\n  \"variable\": \"inter_95e1d3b3-module__jTJ6xG__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA"}},
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["/turbopack/[next]/internal/font/google/inter_95e1d3b3.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Inter%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22variable%22:%22--font-sans%22}],%22variableName%22:%22fontSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'__Inter_95e1d3', '__Inter_Fallback_95e1d3'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;;;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/utils/index.ts"],"sourcesContent":["import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { createOllama } from 'ollama-ai-provider'\nimport { createOpenAI } from '@ai-sdk/openai'\nimport { google } from '@ai-sdk/google'\nimport { anthropic } from '@ai-sdk/anthropic'\nimport { CoreMessage } from 'ai'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function getModel(useSubModel = false) {\n  const ollamaBaseUrl = process.env.OLLAMA_BASE_URL + '/api'\n  const ollamaModel = process.env.OLLAMA_MODEL\n  const ollamaSubModel = process.env.OLLAMA_SUB_MODEL\n  const openaiApiBase = process.env.OPENAI_API_BASE\n  const openaiApiKey = process.env.OPENAI_API_KEY\n  let openaiApiModel = process.env.OPENAI_API_MODEL || 'gpt-4o'\n  const googleApiKey = process.env.GOOGLE_GENERATIVE_AI_API_KEY\n  const anthropicApiKey = process.env.ANTHROPIC_API_KEY\n\n  if (\n    !(ollamaBaseUrl && ollamaModel) &&\n    !openaiApiKey &&\n    !googleApiKey &&\n    !anthropicApiKey\n  ) {\n    throw new Error(\n      'Missing environment variables for Ollama, OpenAI, Google or Anthropic'\n    )\n  }\n  // Ollama\n  if (ollamaBaseUrl && ollamaModel) {\n    const ollama = createOllama({ baseURL: ollamaBaseUrl })\n\n    if (useSubModel && ollamaSubModel) {\n      return ollama(ollamaSubModel)\n    }\n\n    return ollama(ollamaModel)\n  }\n\n  if (googleApiKey) {\n    return google('models/gemini-2.5-flash')\n  }\n\n  if (anthropicApiKey) {\n    return anthropic('claude-3-5-sonnet-20240620')\n  }\n\n  // Fallback to OpenAI instead\n\n  const openai = createOpenAI({\n    baseURL: openaiApiBase, // optional base URL for proxies etc.\n    apiKey: openaiApiKey, // optional API key, default to env property OPENAI_API_KEY\n    organization: '' // optional organization\n  })\n\n  return openai.chat(openaiApiModel)\n}\n\n/**\n * Takes an array of AIMessage and modifies each message where the role is 'tool'.\n * Changes the role to 'assistant' and converts the content to a JSON string.\n * Returns the modified messages as an array of CoreMessage.\n *\n * @param aiMessages - Array of AIMessage\n * @returns modifiedMessages - Array of modified messages\n */\nexport function transformToolMessages(messages: CoreMessage[]): CoreMessage[] {\n  return messages.map(message =>\n    message.role === 'tool'\n      ? {\n          ...message,\n          role: 'assistant',\n          content: JSON.stringify(message.content),\n          type: 'tool'\n        }\n      : message\n  ) as CoreMessage[]\n}\n\n/**\n * Sanitizes a URL by replacing spaces with '%20'\n * @param url - The URL to sanitize\n * @returns The sanitized URL\n */\nexport function sanitizeUrl(url: string): string {\n  return url.replace(/\\s+/g, '%20')\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAQO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,SAAS,SAAS,cAAc,KAAK;IAC1C,MAAM,gBAAgB,QAAQ,GAAG,CAAC,eAAe,GAAG;IACpD,MAAM,cAAc,QAAQ,GAAG,CAAC,YAAY;IAC5C,MAAM,iBAAiB,QAAQ,GAAG,CAAC,gBAAgB;IACnD,MAAM,gBAAgB,QAAQ,GAAG,CAAC,eAAe;IACjD,MAAM,eAAe,QAAQ,GAAG,CAAC,cAAc;IAC/C,IAAI,iBAAiB,QAAQ,GAAG,CAAC,gBAAgB,IAAI;IACrD,MAAM,eAAe,QAAQ,GAAG,CAAC,4BAA4B;IAC7D,MAAM,kBAAkB,QAAQ,GAAG,CAAC,iBAAiB;IAErD,IACE,CAAC,CAAC,iBAAiB,WAAW,KAC9B,CAAC,gBACD,CAAC,gBACD,CAAC,iBACD;QACA,MAAM,IAAI,MACR;IAEJ;IACA,SAAS;IACT,IAAI,iBAAiB,aAAa;QAChC,MAAM,SAAS,CAAA,GAAA,0JAAA,CAAA,eAAY,AAAD,EAAE;YAAE,SAAS;QAAc;QAErD,IAAI,eAAe,gBAAgB;YACjC,OAAO,OAAO;QAChB;QAEA,OAAO,OAAO;IAChB;IAEA,IAAI,cAAc;QAChB,OAAO,CAAA,GAAA,uJAAA,CAAA,SAAM,AAAD,EAAE;IAChB;IAEA,IAAI,iBAAiB;QACnB,OAAO,CAAA,GAAA,0JAAA,CAAA,YAAS,AAAD,EAAE;IACnB;IAEA,6BAA6B;IAE7B,MAAM,SAAS,CAAA,GAAA,uJAAA,CAAA,eAAY,AAAD,EAAE;QAC1B,SAAS;QACT,QAAQ;QACR,cAAc,GAAG,wBAAwB;IAC3C;IAEA,OAAO,OAAO,IAAI,CAAC;AACrB;AAUO,SAAS,sBAAsB,QAAuB;IAC3D,OAAO,SAAS,GAAG,CAAC,CAAA,UAClB,QAAQ,IAAI,KAAK,SACb;YACE,GAAG,OAAO;YACV,MAAM;YACN,SAAS,KAAK,SAAS,CAAC,QAAQ,OAAO;YACvC,MAAM;QACR,IACA;AAER;AAOO,SAAS,YAAY,GAAW;IACrC,OAAO,IAAI,OAAO,CAAC,QAAQ;AAC7B"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/theme-provider.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ThemeProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call ThemeProvider() from the server but ThemeProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/theme-provider.tsx\",\n    \"ThemeProvider\",\n);\n"],"names":[],"mappings":";;;;;;AACO,MAAM,gBAAgB,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,2CACA"}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/mode-toggle.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ModeToggle = registerClientReference(\n    function() { throw new Error(\"Attempted to call ModeToggle() from the server but ModeToggle is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/mode-toggle.tsx\",\n    \"ModeToggle\",\n);\n"],"names":[],"mappings":";;;;;;AACO,MAAM,aAAa,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,wCACA"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/header.tsx"],"sourcesContent":["import React from 'react'\nimport { ModeToggle } from './mode-toggle'\n\nexport const Header: React.FC = async () => {\n  return (\n    <header className=\"fixed w-full p-1 md:p-2 flex justify-between items-center z-10 backdrop-blur md:backdrop-blur-none bg-background/80 md:bg-transparent\">\n      <div>\n        <a href=\"/\">\n          <span className=\"sr-only\">Search</span>\n        </a>\n      </div>\n      <div className=\"flex gap-0.5\">\n        <ModeToggle />\n      </div>\n    </header>\n  )\n}\n\nexport default Header\n"],"names":[],"mappings":";;;;;;;;;AAGO,MAAM,SAAmB;IAC9B,qBACE,wPAAC;QAAO,WAAU;;0BAChB,wPAAC;0BACC,cAAA,wPAAC;oBAAE,MAAK;8BACN,cAAA,wPAAC;wBAAK,WAAU;kCAAU;;;;;;;;;;;;;;;;0BAG9B,wPAAC;gBAAI,WAAU;0BACb,cAAA,wPAAC,6HAAA,CAAA,aAAU;;;;;;;;;;;;;;;;AAInB;uCAEe"}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/footer.tsx"],"sourcesContent":["import React from 'react'\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"w-fit p-1 md:p-2 fixed bottom-0 right-0\">\n    </footer>\n  )\n}\n\nexport default Footer\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,SAAmB;IACvB,qBACE,wPAAC;QAAO,WAAU;;;;;;AAGtB;uCAEe"}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/ui/sonner.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Toaster = registerClientReference(\n    function() { throw new Error(\"Attempted to call Toaster() from the server but Toaster is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/sonner.tsx\",\n    \"Toaster\",\n);\n"],"names":[],"mappings":";;;;;;AACO,MAAM,UAAU,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,sCACA"}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/utils/app-state.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AppStateProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppStateProvider() from the server but AppStateProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/lib/utils/app-state.tsx\",\n    \"AppStateProvider\",\n);\nexport const useAppState = registerClientReference(\n    function() { throw new Error(\"Attempted to call useAppState() from the server but useAppState is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/lib/utils/app-state.tsx\",\n    \"useAppState\",\n);\n"],"names":[],"mappings":";;;;;;;AACO,MAAM,mBAAmB,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,qCACA;AAEG,MAAM,cAAc,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,qCACA"}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/layout.tsx"],"sourcesContent":["import type { Metadata, Viewport } from 'next'\nimport { Inter as FontSans } from 'next/font/google'\nimport './globals.css'\nimport { cn } from '@/lib/utils'\nimport { ThemeProvider } from '@/components/theme-provider'\nimport Header from '@/components/header'\nimport Footer from '@/components/footer'\nimport { Toaster } from '@/components/ui/sonner'\nimport { AppStateProvider } from '@/lib/utils/app-state'\n\nconst fontSans = FontSans({\n  subsets: ['latin'],\n  variable: '--font-sans'\n})\n\nconst title = 'Search'\nconst description =\n  'A fully open-source AI-powered answer engine with a generative UI.'\n\nexport const metadata: Metadata = {\n  metadataBase: new URL('https://so.shfu.cn'),\n  title,\n  description,\n  openGraph: {\n    title,\n    description\n  },\n  twitter: {\n    title,\n    description,\n    card: 'summary_large_image',\n    creator: '@miiura'\n  }\n}\n\nexport const viewport: Viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  minimumScale: 1,\n  maximumScale: 1\n}\n\nexport default function RootLayout({\n  children\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body className={cn('font-sans antialiased', fontSans.variable)}>\n        <ThemeProvider\n          attribute=\"class\"\n          defaultTheme=\"system\"\n          enableSystem\n          disableTransitionOnChange\n        >\n          <AppStateProvider>\n            <Header />\n            {children}\n            <Footer />\n            <Toaster />\n          </AppStateProvider>\n        </ThemeProvider>\n      </body>\n    </html>\n  )\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAeA,MAAM,QAAQ;AACd,MAAM,cACJ;AAEK,MAAM,WAAqB;IAChC,cAAc,IAAI,IAAI;IACtB;IACA;IACA,WAAW;QACT;QACA;IACF;IACA,SAAS;QACP;QACA;QACA,MAAM;QACN,SAAS;IACX;AACF;AAEO,MAAM,WAAqB;IAChC,OAAO;IACP,cAAc;IACd,cAAc;IACd,cAAc;AAChB;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGR;IACA,qBACE,wPAAC;QAAK,MAAK;QAAK,wBAAwB;kBACtC,cAAA,wPAAC;YAAK,WAAW,CAAA,GAAA,qHAAA,CAAA,KAAE,AAAD,EAAE,yBAAyB,yIAAA,CAAA,UAAQ,CAAC,QAAQ;sBAC5D,cAAA,wPAAC,gIAAA,CAAA,gBAAa;gBACZ,WAAU;gBACV,cAAa;gBACb,YAAY;gBACZ,yBAAyB;0BAEzB,cAAA,wPAAC,6HAAA,CAAA,mBAAgB;;sCACf,wPAAC,qHAAA,CAAA,UAAM;;;;;wBACN;sCACD,wPAAC,qHAAA,CAAA,UAAM;;;;;sCACP,wPAAC,2HAAA,CAAA,UAAO;;;;;;;;;;;;;;;;;;;;;;;;;;AAMpB"}},
    {"offset": {"line": 386, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/favicon.ico.mjs (structured image object)"],"sourcesContent":["import src from \"IMAGE\";\nexport default { src, width: 32, height: 32 }\n"],"names":[],"mappings":";;;;;;uCACe;IAAE,KAAA,2GAAA,CAAA,UAAG;IAAE,OAAO;IAAI,QAAQ;AAAG"}},
    {"offset": {"line": 413, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/opengraph-image.png.mjs (structured image object)"],"sourcesContent":["import src from \"IMAGE\";\nexport default { src, width: 1200, height: 627 }\n"],"names":[],"mappings":";;;;;;uCACe;IAAE,KAAA,sHAAA,CAAA,UAAG;IAAE,OAAO;IAAM,QAAQ;AAAI"}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/.next-internal/server/app/_not-found/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}